version: '3.8'

services:
    nginx:
        container_name: sylius-nginx
        build:
            context: docker/nginx
            args:
                - NGINX_VERSION=${NGINX_VERSION}
        ports:
            - ${NGINX_PORT}:80
        depends_on:
              # use PHP-FPM to boost performance and be able to run PHP with nginx server
            - php-fpm
        volumes:
              # set read only public directory to prevent changing production-ready files
            - ./public:/srv/www/sylius/public:ro
              # TO BE VERIFIED:
              # 1. set read and write permissions for images
              # 2. do not copy images to host side
              # 3. set :delegated to boost performance of reading data inside container when modifying files in container side
            - ./public/media:/srv/www/sylius/public/media:rw,nocopy,delegated

    php-fpm:
        container_name: sylius-php
        build:
            context: .
            dockerfile: ./docker/php-fpm/prod/Dockerfile
            args:
                - APP_ENV=${APP_ENV}
                - PHP_VERSION=${PHP_VERSION}
                - PHP_USER_NAME=${PHP_USER_NAME}
                - PHP_USER_GROUP=${PHP_USER_GROUP}
                - UID=${UID}
                - GID=${GID}
                - PHP_DATE_TIMEZONE=${PHP_DATE_TIMEZONE}
                - DB_HOST=${DB_HOST}
        expose:
            - 9000
        depends_on:
              # PHP scripts uses database
            - mysql
        volumes:
            - ./:/srv/www/sylius:delegated
            - ./docker/php-fpm/dev/php.ini:/usr/local/etc/php/php.ini
            - ./docker/php-fpm/cli/php-cli.ini:/usr/local/etc/php/php-cli.ini

    mysql:
        container_name: sylius-mysql
        build:
            context: docker/mysql
            args:
                - MYSQL_VERSION=${MYSQL_VERSION}
        # uncomment line below if you have issues with connecting your DBMS IDE to database server due to password plugin
        # command: ["--default-authentication-plugin=mysql_native_password"]
        environment:
            - MYSQL_USER=${DB_USER}
            - MYSQL_PASSWORD=${DB_PASSWORD}
            - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
        ports:
            - ${DB_PORT}:3306
        volumes:
              # define SQL scripts that are executed when this service is created
            - ./docker/mysql/init:/docker-entrypoint-initdb.d
