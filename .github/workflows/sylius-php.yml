name: PHP Docker Image CI for Sylius

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'php/**'
      - 'WORKSPACE'
  schedule:
    - cron: '0 20 * * 5'

concurrency:
  group: sylius_php_build
  cancel-in-progress: false

jobs:

  build:

    name: "Sylius PHP - ${{ matrix.php }}-${{ matrix.distro }}"

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        php: [ "7.3", "7.4", "8.0", "8.1" ]
        distro: [ "alpine" ]

    steps:

      - uses: actions/checkout@v2

      - name: Set UUID
        id: generate-uuid
        uses: filipstefansson/uuid-action@v1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ secrets.DOCKER_REPOSITORY_NAME }}
          tags: |
            type=raw,value=${{ matrix.php }}-${{ matrix.distro }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1.6.0

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: "${{ runner.os }}-php-${{ matrix.php }}-${{ matrix.distro }}-buildx-cache-${{ secrets.CACHE_VERSION }}-${{ steps.generate-uuid.outputs.uuid }}"
          # https://github.com/actions/cache/issues/109#issuecomment-558771281
          # https://github.community/t/always-save-new-cache-for-incremental-builds/172791
          restore-keys: "${{ runner.os }}-php-${{ matrix.php }}-${{ matrix.distro }}-buildx-cache-${{ secrets.CACHE_VERSION }}-"

      - name: Docker Login
        uses: docker/login-action@v1.10.0
        with:
          username: ${{ secrets.DOCKER_REPOSITORY_LOGIN }}
          password: ${{ secrets.DOCKER_REPOSITORY_PASSWORD }}
          logout: true

      - name: Build multiplatform
        uses: docker/build-push-action@v2
        with:
          file: ./php/Dockerfile
          context: ./php
          build-args: "PHP_SHORT_VERSION=${{ matrix.php }}"
          platforms: linux/amd64,linux/arm64
          push: false
          pull: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

      - name: Build linux/amd64 to tar
        uses: docker/build-push-action@v2
        with:
          file: ./php/Dockerfile
          context: ./php
          build-args: "PHP_SHORT_VERSION=${{ matrix.php }}"
          platforms: linux/amd64
          push: false
          pull: false
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache-new
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new-amd64
          outputs: type=docker,dest=./external/image-amd64.tar

      - name: Build linux/arm64 to tar
        uses: docker/build-push-action@v2
        with:
          file: ./php/Dockerfile
          context: ./php
          build-args: "PHP_SHORT_VERSION=${{ matrix.php }}"
          platforms: linux/arm64
          push: false
          pull: false
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache-new
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new-arm64
          outputs: type=docker,dest=./external/image-arm64.tar

      - name: Setup Bazel
        uses: abhinavsingh/setup-bazel@1fe920bf5df3791aab606c06a3608f4bb600c4f2
        with:
          version: 5.0.0

      - name: Mount Bazel cache
        uses: actions/cache@v2
        with:
          path: "~/.cache/bazel"
          key: "${{ runner.os }}-php-${{ matrix.php }}-${{ matrix.distro }}-bazel-cache-${{ secrets.CACHE_VERSION }}-${{ steps.generate-uuid.outputs.uuid }}"
          restore-keys: "${{ runner.os }}-php-${{ matrix.php }}-${{ matrix.distro }}-bazel-cache-${{ secrets.CACHE_VERSION }}-"

      - name: Setup PHP for Bazel
        run: |
          set -ex
          cat > php/php-version.bzl <<EOF
          PHP_VERSION = "${{ matrix.php }}"
          EOF

      - name: Bazel build and test
        run: |
          set -ex
          targets=$(bazel query 'attr(visibility, "//visibility:public", //php:*)' | sort)
          bazel build --curses=no ${targets}
          bazel test --curses=no --test_output=errors ${targets}

      - name: Push
        uses: docker/build-push-action@v2
        with:
          file: ./php/Dockerfile
          context: ./php
          build-args: "PHP_SHORT_VERSION=${{ matrix.php }}"
          platforms: linux/amd64,linux/arm64
          push: ${{ github.ref == 'refs/heads/main' || github.event_name == 'release' }}
          pull: false
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache-new
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  build-xdebug:
    needs: build

    name: "Sylius PHP with Xdebug - ${{ matrix.php }}-${{ matrix.distro }}"

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        php: [ "7.3", "7.4", "8.0", "8.1" ]
        distro: [ "alpine" ]

    steps:

      - uses: actions/checkout@v2

      - name: Set UUID
        id: generate-uuid
        uses: filipstefansson/uuid-action@v1

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1

      - name: Available platforms
        run: echo ${{ steps.qemu.outputs.platforms }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ secrets.DOCKER_REPOSITORY_NAME }}
          tags: |
            type=raw,value=${{ matrix.php }}-xdebug-${{ matrix.distro }}


      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1.6.0

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: "${{ runner.os }}-php-xdebug-${{ matrix.php }}-${{ matrix.distro }}-buildx-cache-${{ secrets.CACHE_VERSION }}-${{ steps.generate-uuid.outputs.uuid }}"
          # https://github.com/actions/cache/issues/109#issuecomment-558771281
          # https://github.community/t/always-save-new-cache-for-incremental-builds/172791
          restore-keys: "${{ runner.os }}-php-xdebug-${{ matrix.php }}-${{ matrix.distro }}-buildx-cache-${{ secrets.CACHE_VERSION }}-"

      - name: Docker Login
        uses: docker/login-action@v1.10.0
        with:
          username: ${{ secrets.DOCKER_REPOSITORY_LOGIN }}
          password: ${{ secrets.DOCKER_REPOSITORY_PASSWORD }}
          logout: true

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          file: ./php/xdebug.Dockerfile
          context: ./php
          build-args: |
            "IMAGE_NAME=${{ secrets.DOCKER_REPOSITORY_NAME }}"
            "IMAGE_TAG=${{ matrix.php }}-${{ matrix.distro }}"
          platforms: linux/amd64,linux/arm64
          push: ${{ github.ref == 'refs/heads/main' || github.event_name == 'release' }}
          pull: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
